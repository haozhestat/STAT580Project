f <- function(z){
z^{-1.5}*exp(-theta_1*z-theta_2/z+2*sqrt(theta_1*theta_2)+log(sqrt(2*theta_2)))
}
IMH <- function(m, gamma_shape, gamma_rate, init){
X <- rep(NA, m)
X[1] <- init
for(i in 2:m){
U <- runif(1,0,1)
Y <- rgamma(1,gamma_shape, gamma_rate)
r <- min(f(Y)/f(X[i-1])*dgamma(x[i-1],gamma_shape, gamma_rate)/dgamma(Y,gamma_shape, gamma_rate),1)
if(U<=r) X[i] <- Y
else X[i] <- X[i-1]
}
return(X)
}
IMH(10,1,1,1)
IMH <- function(m, gamma_shape, gamma_rate, init){
X <- rep(NA, m)
X[1] <- init
for(i in 2:m){
U <- runif(1,0,1)
Y <- rgamma(1,gamma_shape, gamma_rate)
r <- min(f(Y)/f(X[i-1])*dgamma(X[i-1],gamma_shape, gamma_rate)/dgamma(Y,gamma_shape, gamma_rate),1)
if(U<=r) X[i] <- Y
else X[i] <- X[i-1]
}
return(X)
}
IMH(10,1,1,1)
IMH(10,1,1,0.7)
IMH(10000,1,1,0.7)
IMH_sample <- IMH(10000,1,1,0.7)
mean(IMH_sample)
mean(1/IMH_sample)
Expec_Z
Expec_Inv_Z
IMH_sample <- IMH(10000,1,1,0.7)
mean(IMH_sample) - Expec_Z
mean(1/IMH_sample) - Expec_Inv_Z
abs(mean(IMH_sample) - Expec_Z)/Expec_Z
abs(mean(1/IMH_sample) - Expec_Inv_Z)/Expec_Inv_Z
?rgamma
?rbeta
gibsamp_1_1 <- Gibbs_Sampler(1000,X,Y,1,1,2,0.3,R)
gibsamp_1_1$beta
gibsamp_1_1$lambda
gibsamp_1_1[[1]]
mean(gibsamp_1_1[[1]])
mean(gibsamp_1_1[[2]])
theta_1 <- 1.5
theta_2 <- 2
Expec_Z <- sqrt(theta_2/theta_1)
Expec_Inv_Z <- sqrt(theta_1/theta_2) + 1/(2*theta_2)
f <- function(z){
z^{-1.5}*exp(-theta_1*z-theta_2/z+2*sqrt(theta_1*theta_2)+
log(sqrt(2*theta_2)))
}
IMH <- function(m, gamma_shape, gamma_rate, init){
X <- rep(NA, m)
X[1] <- init
for(i in 2:m){
U <- runif(1,0,1)
Y <- rgamma(1,gamma_shape, gamma_rate)
r <- min(f(Y)/f(X[i-1])*dgamma(X[i-1],gamma_shape, gamma_rate)/
dgamma(Y,gamma_shape, gamma_rate),1)
if(U<=r) X[i] <- Y
else X[i] <- X[i-1]
}
return(X)
}
IMH_sample <- IMH(10000,1,1,0.7)
abs(mean(IMH_sample) - Expec_Z)/Expec_Z
abs(mean(1/IMH_sample) - Expec_Inv_Z)/Expec_Inv_Z
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
IMH_sample <- IMH(10000,1,10,0.7)
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
IMH_sample <- IMH(10000,10,1,0.7)
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
Expec_Z
IMH_sample <- IMH(10000,10,10,0.7)
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
IMH_sample <- IMH(10000,0.1,0.1,0.7)
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
p <- 0.3
lambda <- 2
n <- 100
set.seed(580)
Y <- rpois(n, lambda)
R <- rbinom(n, 1, p)
X <- R*Y
X
plot(density(X))
plot(hist(X), main="The histogram of X")
n <- 10000
plot(hist(X), main="The histogram of X")
p <- 0.3
lambda <- 2
n <- 10000
set.seed(580)
Y <- rpois(n, lambda)
R <- rbinom(n, 1, p)
X <- R*Y
X
plot(hist(X), main="The histogram of X")
?hist
plot(hist(X,probability = TRUE), main="The histogram of X")
plot(hist(X, freq = FALSE), main="The histogram of X")
plot(hist(X, freq = TRUE), main="The histogram of X")
p <- 0.3
lambda <- 2
n <- 100
set.seed(580)
Y <- rpois(n, lambda)
R <- rbinom(n, 1, p)
X <- R*Y
X
plot(hist(X, freq = TRUE), main="The histogram of X")
gibsamp_1_1 <- Gibbs_Sampler(1000,X,Y,1,1,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(1000,X,Y,1,10,2,0.3,R)
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,1,10,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,1,1,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,10,1,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,10,10,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
setwd("~/Dropbox/STAT602/hw3/")
library(GGally)
library(mclust)
library(reshape2)
library(kernlab)
library(phyclust)
library(MASS)
library(caret)
library(rpart)
library(psych)
library(fastAdaboost)
library(bst)
library(nnet)
library(randomForest)
library(glmnet)
library(dplyr)
library(ggplot2)
library(xgboost)
library(klaR)
baseballdat <- read.csv("MaxHRperYear.csv", header = TRUE)
dim(baseballdat)
X <- baseballdat$X
Y <- baseballdat$max
Kernel1_fun <- function(x,z){
exp(-0.5*(x-z)^2)
}
Kernel2_fun <- function(x,z){
exp(-(x-z)^2)
}
K_mat <- function(kernel_fun){
sapply(X, function(z) kernel_fun(z,X))
}
A_mat_1 <-  cbind(rep(1,length(X)), X, X^2, K_mat(Kernel1_fun))
A_mat_2 <-  cbind(rep(1,length(X)), X, X^2, K_mat(Kernel2_fun))
B_mat_1 <- diag(0,3+length(X))
B_mat_2 <- diag(0,3+length(X))
B_mat_1[4:(length(X)+3),4:(length(X)+3)] <- K_mat(Kernel1_fun)
B_mat_2[4:(length(X)+3),4:(length(X)+3)] <- K_mat(Kernel2_fun)
lambda1 <- 0.01
lambda2 <- 100
yhat_fun_1 <- function(x){
nu <- matrix(c(1,x,x^2,sapply(X, function(z) Kernel1_fun(z,x))),1,3+length(X))
nu%*%ginv(t(A_mat_1)%*%A_mat_1+lambda1*B_mat_1)%*%t(A_mat_1)%*%Y
}
yhat_fun_2 <- function(x){
nu <- matrix(c(1,x,x^2,sapply(X, function(z) Kernel1_fun(z,x))),1,3+length(X))
nu%*%ginv(t(A_mat_1)%*%A_mat_1+lambda2*B_mat_1)%*%t(A_mat_1)%*%Y
}
yhat_fun_3 <- function(x){
nu <- matrix(c(1,x,x^2,sapply(X, function(z) Kernel2_fun(z,x))),1,3+length(X))
nu%*%ginv(t(A_mat_2)%*%A_mat_2+lambda1*B_mat_2)%*%t(A_mat_2)%*%Y
}
yhat_fun_4 <- function(x){
nu <- matrix(c(1,x,x^2,sapply(X, function(z) Kernel2_fun(z,x))),1,3+length(X))
nu%*%ginv(t(A_mat_2)%*%A_mat_2+lambda2*B_mat_2)%*%t(A_mat_2)%*%Y
}
par(mfrow=c(2,2))
plot(X,Y, main="lambda = 1, kernel function 1")
lines(X,Vectorize(yhat_fun_1)(X))
plot(X,Y, main="lambda = 10, kernel function 1")
lines(X,Vectorize(yhat_fun_2)(X))
plot(X,Y, main="lambda = 1, kernel function 2")
lines(X,Vectorize(yhat_fun_3)(X))
plot(X,Y, main="lambda = 10, kernel function 2")
lines(X,Vectorize(yhat_fun_4)(X))
plot(X,Y, main="lambda = 1, kernel function 1")
plot(X,Y, main="lambda = 1, kernel function 1")
lines(X,Vectorize(yhat_fun_1)(X))
plot(X,Y, main="lambda = 10, kernel function 1")
lines(X,Vectorize(yhat_fun_2)(X))
plot(X,Y, main="lambda = 1, kernel function 2")
lines(X,Vectorize(yhat_fun_3)(X))
plot(X,Y, main="lambda = 10, kernel function 2")
lines(X,Vectorize(yhat_fun_4)(X))
plot(X,Y, main="lambda = 1, kernel function 1")
lines(X,Vectorize(yhat_fun_1)(X))
lines(X,Vectorize(yhat_fun_1)(X))
lines(X,Vectorize(yhat_fun_2)(X))
plot(X,Y, main="lambda = 1, kernel function 1")
plot(X,Y, main="lambda = 1, kernel function 1")
lines(X,Vectorize(yhat_fun_1)(X))
#plot(X,Y, main="lambda = 10, kernel function 1")
lines(X,Vectorize(yhat_fun_2)(X))
#plot(X,Y, main="lambda = 1, kernel function 2")
lines(X,Vectorize(yhat_fun_3)(X))
#plot(X,Y, main="lambda = 10, kernel function 2")
lines(X,Vectorize(yhat_fun_4)(X))
library("xgboost")
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
require(randomForest)
require(dplyr) # load this in last so plyr doens't overlap it
require(caret)
library(xgboost)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
x_train = df[df$Train == 1, 3:ncol(df)]
x_test = df[df$Train == 0, 3:ncol(df)]
y_train = df$SalePrice[df$Train == 1]
detectCores()
install.packages("parallel")
install.packages("parallel")
library(parallel)
detectCores()
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
#require(randomForest)
#require(dplyr) # load this in last so plyr doens't overlap it
library(caret)
library(xgboost)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
x_train = df[df$Train == 1, 3:ncol(df)]
x_test = df[df$Train == 0, 3:ncol(df)]
y_train = df$SalePrice[df$Train == 1]
ncol(x_train)
nrow(x_train)
3*5*2*2
60*20/16
60*10/16
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(xgboost)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
x_train = df[df$Train == 1, 3:ncol(df)]
x_test = df[df$Train == 0, 3:ncol(df)]
y_train = df$SalePrice[df$Train == 1]
dtrain = xgb.DMatrix(as.matrix(x_train), label = y_train)
dtest = xgb.DMatrix(as.matrix(x_test))
cv_ctrl = trainControl(method = "repeatedcv", repeats = 2, number = 5, allowParallel=T)
xgb_grid = expand.grid(nrounds = 1000,
eta = c(0.01, 0.005, 0.001)
max_depth = c(2, 4, 6, 8, 10),
colsample_bytree=c(0.8,1),
min_child_weight = 2,
subsample=c(0.6,0.8),
gamma=0.01)
set.seed(602)
xgb_tune = train(as.matrix(x_train),
y_train,
method="xgbTree",
trControl=cv_ctrl,
tuneGrid=xgb_grid,
verbose=T,
metric="RMSE",
preProcess = c("center", "scale"),
nthread = 16)
xgb_grid = expand.grid(nrounds = 1000,
eta = c(0.01, 0.005, 0.001)
max_depth = c(2, 4, 6, 8, 10),
colsample_bytree=c(0.8,1),
min_child_weight = 2,
subsample=c(0.6,0.8),
gamma=0.01)
xgb_grid = expand.grid(nrounds = 1000,
eta = c(0.01, 0.005, 0.001),
max_depth = c(2, 4, 6, 8, 10),
colsample_bytree=c(0.8,1),
min_child_weight = 2,
subsample=c(0.6,0.8),
gamma=0.01)
set.seed(602)
xgb_tune = train(as.matrix(x_train),
y_train,
method="xgbTree",
trControl=cv_ctrl,
tuneGrid=xgb_grid,
verbose=T,
metric="RMSE",
preProcess = c("center", "scale"),
nthread = 1)
save.image("~/Documents/KaggleAmesHouse/xgboost_tune/Untitled.RData")
xgb_grid = expand.grid(nrounds = 750,
eta = 0.005,
max_depth = 4,
colsample_bytree=1,
min_child_weight = 2,
subsample=0.6,
gamma=0.01)
xgb_tune = train(as.matrix(x_train),
y_train,
method="xgbTree",
trControl=cv_ctrl,
tuneGrid=xgb_grid,
verbose=T,
metric="RMSE",
preProcess = c("center", "scale"),
nthread = 16)
print(xgb_tune)
xgb_grid = expand.grid(nrounds = 750,
eta = 0.005,
max_depth = c(2,4),
colsample_bytree=1,
min_child_weight = 2,
subsample=0.6,
gamma=0.01)
xgb_tune = train(as.matrix(x_train),
y_train,
method="xgbTree",
trControl=cv_ctrl,
tuneGrid=xgb_grid,
verbose=T,
metric="RMSE",
preProcess = c("center", "scale"),
nthread = 16)
print(xgb_tune)
xgb_grid = expand.grid(.nrounds = 2000,
.eta = c(0.01, 0.005, 0.001),
.max_depth = c(2, 4, 6, 8),
.colsample_bytree=c(0.8,1),
.min_child_weight = 2,
.subsample=c(0.6,0.8),
.gamma=c(0,0.01))
set.seed(602)
xgb_tune = train(as.matrix(x_train),
y_train,
method="xgbTree",
trControl=cv_ctrl,
tuneGrid=xgb_grid,
verbose=T,
metric="RMSE",
preProcess = c("center", "scale"),
nthread = 16)
xgb_grid
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(xgboost)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
pmatrix = prcomp(df[,3:ncol(df)], center = TRUE, scale. = TRUE)
pmatrix$sdev
result <- read.csv("sim_result_internalsvd.csv", header = TRUE)
setwd("~/Documents/Soft-Impute-MovieLens/")
result <- read.csv("sim_result_internalsvd.csv", header = TRUE)
result$method <- "internalsvd"
result1 <- read.csv("sim_result_rpacksvd.csv", header = TRUE)
result1$method <- "rpacksvd"
result2 <- rbind(result,result1)
ggplot(result2[result2$Time<100,]) +
geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time, colour=method), size=0.8)
library(ggplot2)
result2
colnames(result2)[1]
colnames(result2)
colnames(result2) <- c("lambda", "RMSE_validation", "Time", "method")
ggplot(result2[result2$Time<100,]) +
geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time, colour=method), size=0.8)
ggplot(result2) +
geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time, colour=method), size=0.8)
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
result
result
dim(result)
result$Step <- c(rep("Step 1", 16), rep("Step 2", 16), rep("Step 3", 16), rep("Step 4", 16))
library(ggplot2)
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
result <- read.csv("sim_result_internalsvd.csv", header = TRUE)
result$method <- "internalsvd"
result1 <- read.csv("sim_result_rpacksvd.csv", header = TRUE)
result1$method <- "rpacksvd"
result2 <- rbind(result,result1)
colnames(result2) <- c("lambda", "RMSE_validation", "Time", "method")
result$Step <- c(rep("Step 1", 16), rep("Step 2", 16), rep("Step 3", 16), rep("Step 4", 16))
colnames(result)
colnames(result) <- c("lambda", "RMSE_validation", "Time", "Step")
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
result
result <- read.csv("sim_result_internalsvd.csv", header = TRUE)
result$method <- "internalsvd"
result1 <- read.csv("sim_result_rpacksvd.csv", header = TRUE)
result1$method <- "rpacksvd"
result2 <- rbind(result,result1)
colnames(result2) <- c("lambda", "RMSE_validation", "Time", "method")
result$Step <- as.factor(c(rep("Step 1", 16), rep("Step 2", 16), rep("Step 3", 16), rep("Step 4", 16)))
colnames(result) <- c("lambda", "RMSE_validation", "Time", "Step")
ggplot(result2) +
geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time, colour=method), size=0.8)
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(.~Step, scales = "free")
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
ggplot(result) + geom_line(aes(x=lambda,y=Time), linetype= 2)+
geom_point(aes(x=lambda,y=Time))
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
#geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step)
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_grid(.~Step, scales = "free")
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_grid(Step~., scales = "free")
result$Step
colnames(result)
result <- read.csv("sim_result_internalsvd.csv", header = TRUE)
result$method <- "internalsvd"
result1 <- read.csv("sim_result_rpacksvd.csv", header = TRUE)
result1$method <- "rpacksvd"
result2 <- rbind(result,result1)
colnames(result2) <- c("lambda", "RMSE_validation", "Time", "method")
result$Step <- as.factor(c(rep("Step 1", 16), rep("Step 2", 16), rep("Step 3", 16), rep("Step 4", 16)))
colnames(result) <- c("lambda", "RMSE_validation", "Time", "method" "Step")
colnames(result) <- c("lambda", "RMSE_validation", "Time", "method", "Step")
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
ggplot(result2) +
geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time, colour=method), size=0.8)
result[1:16,]
result[17:32,]
which.min(result$RMSE_validation)
result[57,]
rm(list = ls())
library(dplyr)
library(foreach)
library(doParallel)
setwd("~/Documents/Soft-Impute-MovieLens/")
source("Codes/haozhe/softimpute_internalsvd.R")
#source("softimpute_rpacksvd.R")
mat_train <- read.table("Data/ml-100k/movie_train.txt")
mat_validation <- read.table("Data/ml-100k/movie_validation.txt")
mat_test <- read.table("Data/ml-100k/movie_test.txt")
mat_train <- as.matrix(mat_train)
mat_validation <- as.matrix(mat_validation)
mat_test <- as.matrix(mat_test)
# mat_train <- read.table("movie_train.txt")
# mat_validation <- read.table("movie_validation.txt")
# mat_test <- read.table("movie_test.txt")
tmp_train <- mat_train
tmp_train[is.na(tmp_train)] <- 0
tmp_svd <- svd(tmp_train)$d
result[57,]
result <- read.csv("sim_result_internalsvd.csv", header = TRUE)
result$method <- "internalsvd"
result1 <- read.csv("sim_result_rpacksvd.csv", header = TRUE)
result1$method <- "rpacksvd"
result2 <- rbind(result,result1)
colnames(result2) <- c("lambda", "RMSE_validation", "Time", "method")
result$Step <- as.factor(c(rep("Step 1", 16), rep("Step 2", 16), rep("Step 3", 16), rep("Step 4", 16)))
colnames(result) <- c("lambda", "RMSE_validation", "Time", "method", "Step")
result[57,]
result1[57,]
softimpute_internalsvd(mat_train, 12.27333,mat_test, 10^(-6))
