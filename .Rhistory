X <- R*Y
X
set.seed(580)
R <- rpois(n, lambda)
set.seed(580)
Y <- rbinom(n, 1, p)
X <- R*Y
X
set.seed(580)
R <- rpois(n, lambda)
set.seed(580)
Y <- rbinom(n, 1, p)
X <- R*Y
X
set.seed(580)
R <- rpois(n, lambda)
set.seed(580)
Y <- rbinom(n, 1, p)
X <- R*Y
X
set.seed(580)
R <- rpois(n, lambda)
#set.seed(580)
Y <- rbinom(n, 1, p)
X <- R*Y
X
set.seed(580)
R <- rpois(n, lambda)
#set.seed(580)
Y <- rbinom(n, 1, p)
X <- R*Y
X
?rgamma
k=2
a=b=1
r[,k-1]
?rbeta
rbinom
ifelse(1==0,1,0)
?ifelse
ifelse(0==0,1,0)
Gibbs_Sampler <- function(m, X, Y, a, b,init_lambda, init_p, init_r){
n <- length(X)
lambda <- rep(NA,m)
p <- rep(NA,m)
r <- matrix(NA, n, m)
lambda[1] <- init_lambda
p[i] <- init_p
r[,1] <- init_r
for(k in 2:m){
lambda[k] <- rgamma(1,a+sum(X), b+sum(r[,k-1]))
p[k] <- rbeta(1,1+sum(r[,k-1]),n+1-sum(r[,k-1]))
r[,k] <- sapply(1:n, function(t){rbinom(1,1,p[k]*exp(-lambda[k])/
(p[k]*exp(-lambda[k])+(1-p[k])*ifelse(X[t]==0,1,0))})
}
return(list(lambda, p, r))
}
Gibbs_Sampler <- function(m, X, Y, a, b,init_lambda, init_p, init_r){
n <- length(X)
lambda <- rep(NA,m)
p <- rep(NA,m)
r <- matrix(NA, n, m)
lambda[1] <- init_lambda
p[i] <- init_p
r[,1] <- init_r
for(k in 2:m){
lambda[k] <- rgamma(1,a+sum(X), b+sum(r[,k-1]))
p[k] <- rbeta(1,1+sum(r[,k-1]),n+1-sum(r[,k-1]))
r[,k] <- sapply(1:n, function(t){rbinom(1,1,p[k]*exp(-lambda[k])/
(p[k]*exp(-lambda[k])+(1-p[k])*ifelse(X[t]==0,1,0)))})
}
return(list(lambda, p, r))
}
Gibbs_Sampler(10,X,Y,1,1,2,0.3,R)
Gibbs_Sampler <- function(m, X, Y, a, b,init_lambda, init_p, init_r){
n <- length(X)
lambda <- rep(NA,m)
p <- rep(NA,m)
r <- matrix(NA, n, m)
lambda[1] <- init_lambda
p[1] <- init_p
r[,1] <- init_r
for(k in 2:m){
lambda[k] <- rgamma(1,a+sum(X), b+sum(r[,k-1]))
p[k] <- rbeta(1,1+sum(r[,k-1]),n+1-sum(r[,k-1]))
r[,k] <- sapply(1:n, function(t){rbinom(1,1,p[k]*exp(-lambda[k])/
(p[k]*exp(-lambda[k])+(1-p[k])*ifelse(X[t]==0,1,0)))})
}
return(list(lambda, p, r))
}
Gibbs_Sampler(10,X,Y,1,1,2,0.3,R)
warnings()
n <- length(X)
lambda <- rep(NA,m)
p <- rep(NA,m)
r <- matrix(NA, n, m)
m=10
n <- length(X)
lambda <- rep(NA,m)
p <- rep(NA,m)
r <- matrix(NA, n, m)
init_lambda = 2
init_p = 0.3
init_r = R
n <- length(X)
lambda <- rep(NA,m)
p <- rep(NA,m)
r <- matrix(NA, n, m)
lambda[1] <- init_lambda
p[1] <- init_p
r[,1] <- init_r
k=2
lambda[k] <- rgamma(1,a+sum(X), b+sum(r[,k-1]))
p[k] <- rbeta(1,1+sum(r[,k-1]),n+1-sum(r[,k-1]))
1+sum(r[,k-1])
n+1-sum(r[,k-1])
sum(r[,k-1])
R
p <- 0.3
lambda <- 2
n <- 100
set.seed(580)
Y <- rpois(n, lambda)
R <- rbinom(n, 1, p)
X <- R*Y
X
lambda[k] <- rgamma(1,a+sum(X), b+sum(r[,k-1]))
p[k] <- rbeta(1,1+sum(r[,k-1]),n+1-sum(r[,k-1]))
init_r = R
r[,1] <- init_r
p[k] <- rbeta(1,1+sum(r[,k-1]),n+1-sum(r[,k-1]))
r[,k] <- sapply(1:n, function(t){rbinom(1,1,p[k]*exp(-lambda[k])/
(p[k]*exp(-lambda[k])+(1-p[k])*ifelse(X[t]==0,1,0)))})
Gibbs_Sampler <- function(m, X, Y, a, b,init_lambda, init_p, init_r){
n <- length(X)
lambda <- rep(NA,m)
p <- rep(NA,m)
r <- matrix(NA, n, m)
lambda[1] <- init_lambda
p[1] <- init_p
r[,1] <- init_r
for(k in 2:m){
lambda[k] <- rgamma(1,a+sum(X), b+sum(r[,k-1]))
p[k] <- rbeta(1,1+sum(r[,k-1]),n+1-sum(r[,k-1]))
r[,k] <- sapply(1:n, function(t){rbinom(1,1,p[k]*exp(-lambda[k])/
(p[k]*exp(-lambda[k])+(1-p[k])*ifelse(X[t]==0,1,0)))})
}
return(list(lambda, p, r))
}
Gibbs_Sampler(10,X,Y,1,1,2,0.3,R)
Gibbs_Sampler(1000,X,Y,1,1,2,0.3,R)
gibsamp
gibsamp <- Gibbs_Sampler(1000,X,Y,1,1,2,0.3,R)
gibsamp[[1]]
mean(gibsamp[[1]])
mean(gibsamp[[2]])
quantile(gibsamp[[1]], c(0.025,0.975))
gibsamp <- Gibbs_Sampler(1000,X,Y,1,1,2,0.3,R)
quantile(gibsamp[[1]], c(0.025,0.975))
quantile(gibsamp[[2]], c(0.025,0.975))
gibsamp <- Gibbs_Sampler(100000,X,Y,1,1,2,0.3,R)
quantile(gibsamp[[1]], c(0.025,0.975))
quantile(gibsamp[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,1,1,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
Expec_Z <- sqrt(theta_2/theta_1)
theta_1 <- 1.5
theta_2 <- 2
Expec_Z <- sqrt(theta_2/theta_1)
Expec_Inv_Z <- sqrt(theta_1/theta_2) + 1/(2*theta_2)
x^{-1.5}*exp(-theta_1*z-theta_2/z+2*sqrt(theta_1*theta_2)+log(sqrt(2*theta_2)))
?rgamma
U <- runif(1,0,1)
IMH <- function(m, gamma_shape, gamma_rate, init){
X <- rep(NA, m)
X[1] <- init
for(i in 2:m){
U <- runif(1,0,1)
Y <- rgamma(1,gamma_shape, gamma_rate)
r <- min(f(Y)/f(X[i-1])*dgamma(x[i-1],gamma_shape, gamma_rate)/dgamma(Y,gamma_shape, gamma_rate),1)
if(U<=r) X[i] <- Y
else X[i] <- X[i-1]
}
return(X)
}
IMH(10,1,1,1)
theta_1 <- 1.5
theta_2 <- 2
Expec_Z <- sqrt(theta_2/theta_1)
Expec_Inv_Z <- sqrt(theta_1/theta_2) + 1/(2*theta_2)
f <- function(z){
z^{-1.5}*exp(-theta_1*z-theta_2/z+2*sqrt(theta_1*theta_2)+log(sqrt(2*theta_2)))
}
IMH <- function(m, gamma_shape, gamma_rate, init){
X <- rep(NA, m)
X[1] <- init
for(i in 2:m){
U <- runif(1,0,1)
Y <- rgamma(1,gamma_shape, gamma_rate)
r <- min(f(Y)/f(X[i-1])*dgamma(x[i-1],gamma_shape, gamma_rate)/dgamma(Y,gamma_shape, gamma_rate),1)
if(U<=r) X[i] <- Y
else X[i] <- X[i-1]
}
return(X)
}
IMH(10,1,1,1)
IMH <- function(m, gamma_shape, gamma_rate, init){
X <- rep(NA, m)
X[1] <- init
for(i in 2:m){
U <- runif(1,0,1)
Y <- rgamma(1,gamma_shape, gamma_rate)
r <- min(f(Y)/f(X[i-1])*dgamma(X[i-1],gamma_shape, gamma_rate)/dgamma(Y,gamma_shape, gamma_rate),1)
if(U<=r) X[i] <- Y
else X[i] <- X[i-1]
}
return(X)
}
IMH(10,1,1,1)
IMH(10,1,1,0.7)
IMH(10000,1,1,0.7)
IMH_sample <- IMH(10000,1,1,0.7)
mean(IMH_sample)
mean(1/IMH_sample)
Expec_Z
Expec_Inv_Z
IMH_sample <- IMH(10000,1,1,0.7)
mean(IMH_sample) - Expec_Z
mean(1/IMH_sample) - Expec_Inv_Z
abs(mean(IMH_sample) - Expec_Z)/Expec_Z
abs(mean(1/IMH_sample) - Expec_Inv_Z)/Expec_Inv_Z
?rgamma
?rbeta
gibsamp_1_1 <- Gibbs_Sampler(1000,X,Y,1,1,2,0.3,R)
gibsamp_1_1$beta
gibsamp_1_1$lambda
gibsamp_1_1[[1]]
mean(gibsamp_1_1[[1]])
mean(gibsamp_1_1[[2]])
theta_1 <- 1.5
theta_2 <- 2
Expec_Z <- sqrt(theta_2/theta_1)
Expec_Inv_Z <- sqrt(theta_1/theta_2) + 1/(2*theta_2)
f <- function(z){
z^{-1.5}*exp(-theta_1*z-theta_2/z+2*sqrt(theta_1*theta_2)+
log(sqrt(2*theta_2)))
}
IMH <- function(m, gamma_shape, gamma_rate, init){
X <- rep(NA, m)
X[1] <- init
for(i in 2:m){
U <- runif(1,0,1)
Y <- rgamma(1,gamma_shape, gamma_rate)
r <- min(f(Y)/f(X[i-1])*dgamma(X[i-1],gamma_shape, gamma_rate)/
dgamma(Y,gamma_shape, gamma_rate),1)
if(U<=r) X[i] <- Y
else X[i] <- X[i-1]
}
return(X)
}
IMH_sample <- IMH(10000,1,1,0.7)
abs(mean(IMH_sample) - Expec_Z)/Expec_Z
abs(mean(1/IMH_sample) - Expec_Inv_Z)/Expec_Inv_Z
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
IMH_sample <- IMH(10000,1,10,0.7)
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
IMH_sample <- IMH(10000,10,1,0.7)
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
Expec_Z
IMH_sample <- IMH(10000,10,10,0.7)
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
IMH_sample <- IMH(10000,0.1,0.1,0.7)
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
abs(mean(IMH_sample) - Expec_Z)
abs(mean(1/IMH_sample) - Expec_Inv_Z)
p <- 0.3
lambda <- 2
n <- 100
set.seed(580)
Y <- rpois(n, lambda)
R <- rbinom(n, 1, p)
X <- R*Y
X
plot(density(X))
plot(hist(X), main="The histogram of X")
n <- 10000
plot(hist(X), main="The histogram of X")
p <- 0.3
lambda <- 2
n <- 10000
set.seed(580)
Y <- rpois(n, lambda)
R <- rbinom(n, 1, p)
X <- R*Y
X
plot(hist(X), main="The histogram of X")
?hist
plot(hist(X,probability = TRUE), main="The histogram of X")
plot(hist(X, freq = FALSE), main="The histogram of X")
plot(hist(X, freq = TRUE), main="The histogram of X")
p <- 0.3
lambda <- 2
n <- 100
set.seed(580)
Y <- rpois(n, lambda)
R <- rbinom(n, 1, p)
X <- R*Y
X
plot(hist(X, freq = TRUE), main="The histogram of X")
gibsamp_1_1 <- Gibbs_Sampler(1000,X,Y,1,1,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(1000,X,Y,1,10,2,0.3,R)
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,1,10,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,1,1,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,10,1,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,10,10,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
setwd("~/Dropbox/STAT602/hw3/")
library(GGally)
library(mclust)
library(reshape2)
library(kernlab)
library(phyclust)
library(MASS)
library(caret)
library(rpart)
library(psych)
library(fastAdaboost)
library(bst)
library(nnet)
library(randomForest)
library(glmnet)
library(dplyr)
library(ggplot2)
library(xgboost)
library(klaR)
baseballdat <- read.csv("MaxHRperYear.csv", header = TRUE)
dim(baseballdat)
X <- baseballdat$X
Y <- baseballdat$max
Kernel1_fun <- function(x,z){
exp(-0.5*(x-z)^2)
}
Kernel2_fun <- function(x,z){
exp(-(x-z)^2)
}
K_mat <- function(kernel_fun){
sapply(X, function(z) kernel_fun(z,X))
}
A_mat_1 <-  cbind(rep(1,length(X)), X, X^2, K_mat(Kernel1_fun))
A_mat_2 <-  cbind(rep(1,length(X)), X, X^2, K_mat(Kernel2_fun))
B_mat_1 <- diag(0,3+length(X))
B_mat_2 <- diag(0,3+length(X))
B_mat_1[4:(length(X)+3),4:(length(X)+3)] <- K_mat(Kernel1_fun)
B_mat_2[4:(length(X)+3),4:(length(X)+3)] <- K_mat(Kernel2_fun)
lambda1 <- 0.01
lambda2 <- 100
yhat_fun_1 <- function(x){
nu <- matrix(c(1,x,x^2,sapply(X, function(z) Kernel1_fun(z,x))),1,3+length(X))
nu%*%ginv(t(A_mat_1)%*%A_mat_1+lambda1*B_mat_1)%*%t(A_mat_1)%*%Y
}
yhat_fun_2 <- function(x){
nu <- matrix(c(1,x,x^2,sapply(X, function(z) Kernel1_fun(z,x))),1,3+length(X))
nu%*%ginv(t(A_mat_1)%*%A_mat_1+lambda2*B_mat_1)%*%t(A_mat_1)%*%Y
}
yhat_fun_3 <- function(x){
nu <- matrix(c(1,x,x^2,sapply(X, function(z) Kernel2_fun(z,x))),1,3+length(X))
nu%*%ginv(t(A_mat_2)%*%A_mat_2+lambda1*B_mat_2)%*%t(A_mat_2)%*%Y
}
yhat_fun_4 <- function(x){
nu <- matrix(c(1,x,x^2,sapply(X, function(z) Kernel2_fun(z,x))),1,3+length(X))
nu%*%ginv(t(A_mat_2)%*%A_mat_2+lambda2*B_mat_2)%*%t(A_mat_2)%*%Y
}
par(mfrow=c(2,2))
plot(X,Y, main="lambda = 1, kernel function 1")
lines(X,Vectorize(yhat_fun_1)(X))
plot(X,Y, main="lambda = 10, kernel function 1")
lines(X,Vectorize(yhat_fun_2)(X))
plot(X,Y, main="lambda = 1, kernel function 2")
lines(X,Vectorize(yhat_fun_3)(X))
plot(X,Y, main="lambda = 10, kernel function 2")
lines(X,Vectorize(yhat_fun_4)(X))
plot(X,Y, main="lambda = 1, kernel function 1")
plot(X,Y, main="lambda = 1, kernel function 1")
lines(X,Vectorize(yhat_fun_1)(X))
plot(X,Y, main="lambda = 10, kernel function 1")
lines(X,Vectorize(yhat_fun_2)(X))
plot(X,Y, main="lambda = 1, kernel function 2")
lines(X,Vectorize(yhat_fun_3)(X))
plot(X,Y, main="lambda = 10, kernel function 2")
lines(X,Vectorize(yhat_fun_4)(X))
plot(X,Y, main="lambda = 1, kernel function 1")
lines(X,Vectorize(yhat_fun_1)(X))
lines(X,Vectorize(yhat_fun_1)(X))
lines(X,Vectorize(yhat_fun_2)(X))
plot(X,Y, main="lambda = 1, kernel function 1")
plot(X,Y, main="lambda = 1, kernel function 1")
lines(X,Vectorize(yhat_fun_1)(X))
#plot(X,Y, main="lambda = 10, kernel function 1")
lines(X,Vectorize(yhat_fun_2)(X))
#plot(X,Y, main="lambda = 1, kernel function 2")
lines(X,Vectorize(yhat_fun_3)(X))
#plot(X,Y, main="lambda = 10, kernel function 2")
lines(X,Vectorize(yhat_fun_4)(X))
rm(list = ls())
library(dplyr)
library(foreach)
library(doParallel)
setwd("~/Documents/Soft-Impute-MovieLens/")
source("Codes/haozhe/softimpute_internalsvd.R")
#source("softimpute_rpacksvd.R")
mat_train <- read.table("Data/ml-100k/movie_train.txt")
mat_validation <- read.table("Data/ml-100k/movie_validation.txt")
mat_test <- read.table("Data/ml-100k/movie_test.txt")
mat_train <- as.matrix(mat_train)
mat_validation <- as.matrix(mat_validation)
mat_test <- as.matrix(mat_test)
# mat_train <- read.table("movie_train.txt")
# mat_validation <- read.table("movie_validation.txt")
# mat_test <- read.table("movie_test.txt")
tmp_train <- mat_train
tmp_train[is.na(tmp_train)] <- 0
tmp_svd <- svd(tmp_train)$d
cl <- makeCluster(2)
registerDoParallel(cl)
lambda_grid_1 <- quantile(tmp_svd, seq(0.05,0.95,0.05))
sim_result_1 <- sapply(lambda_grid_1,
function(lambda) {
softimpute_internalsvd(mat_train, lambda, 0.01, mat_validation)})
print(sim_result_1)
lambda_grid_2 <- seq(lambda_grid_1[which.min(sim_result_1[1,])] - 5,
lambda_grid_1[which.min(sim_result_1[1,])] + 5, 1)
sim_result_2 <- sapply(lambda_grid_2,
function(lambda) {
softimpute_internalsvd(mat_train, lambda, 0.01, mat_validation)})
print(sim_result_2)
lambda_grid_3 <- seq(lambda_grid_2[which.min(sim_result_2[1,])] - 1,
lambda_grid_2[which.min(sim_result_2[1,])] + 1, 0.1)
sim_result_3 <- sapply(lambda_grid_3,
function(lambda) {
softimpute_internalsvd(mat_train, lambda, 0.01, mat_validation)})
print(sim_result_3)
lambda_grid_4 <- seq(lambda_grid_3[which.min(sim_result_3[1,])] - 0.1,
lambda_grid_3[which.min(sim_result_3[1,])] + 0.1, 0.01)
sim_result_4 <- sapply(lambda_grid_4,
function(lambda) {
softimpute_internalsvd(mat_train, lambda, 0.01, mat_validation)})
print(sim_result_4)
stopCluster(cl)
softimpute_rpacksvd(mat_train, lambda_grid_4[which.max(sim_result_4[1,])],
10^(-3), mat_test)
result <- rbind(
data.frame(lambda = lambda_grid_1, RMSE_validation = sim_result_1[1,],
Time = sim_result_1[2,], Step = "Step 1"),
data.frame(lambda = lambda_grid_2, RMSE_validation = sim_result_2[1,],
Time = sim_result_2[2,], Step = "Step 2"),
data.frame(lambda = lambda_grid_3, RMSE_validation = sim_result_3[1,],
Time = sim_result_3[2,], Step = "Step 3"),
data.frame(lambda = lambda_grid_4, RMSE_validation = sim_result_4[1,],
Time = sim_result_4[2,], Step = "Step 4"))
write.csv(result,file="sim_result_internalsvd_001.csv", row.names = FALSE)
library(ggplot2)
ggplot(result) + geom_line(aes(x=lambda,y=RMSE_validation), linetype= 2)+
geom_point(aes(x=lambda,y=RMSE_validation))+
facet_wrap(~Step, scales = "free")
ggplot(result) + geom_line(aes(x=lambda,y=Time), linetype= 2)+
geom_point(aes(x=lambda,y=Time))
result1 <- read.csv("sim_result_rpacksvd_001.csv", header = TRUE)
result$method <- "internalsvd"
result1$method <- "rpacksvd"
ggplot(rbind(result,result1)) + geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time))
ggplot(result2[result2$Time<100,]) +
geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time, colour=method))
result2 <- rbind(result,result1)
ggplot(result2[result2$Time<100,]) +
geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time, colour=method))
ggplot(result2[result2$Time<100,]) +
geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time, colour=method), size=0.5)
ggplot(result2[result2$Time<100,]) +
geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time, colour=method), size=0.7)
ggplot(result2[result2$Time<100,]) +
geom_line(aes(x=lambda,y=Time, colour=method), linetype= 2)+
geom_point(aes(x=lambda,y=Time, colour=method), size=0.8)
result
34.92-5
34.92+5
which.min(result$RMSE_validation)
result[which.min(result$RMSE_validation),]
result1[which.min(result1$RMSE_validation),]
softimpute_rpacksvd(mat_train, lambda_grid_4[which.max(sim_result_4[1,])],
10^(-3), mat_test)
softimpute_internalsvd(mat_train, lambda_grid_4[which.max(sim_result_4[1,])],
10^(-3), mat_test)
